{"ast":null,"code":"var _jsxFileName = \"C:\\\\yoniP\\\\ap2-ex2\\\\Client\\\\src\\\\Chats\\\\Right\\\\Right.js\",\n  _s = $RefreshSig$();\nimport './Right.css';\nimport ActiveContact from './ActiveContact/ActiveContact';\nimport ActiveChat from './ActiveChat/ActiveChat';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction convertToDate(timeString) {\n  if (timeString === '' || timeString === undefined) {\n    return new Date(0);\n  }\n  const [datePart, timePart] = (timeString || '').split(', ');\n  const [day, month, year] = (datePart || '').split('.');\n  const [hour, minute, second] = (timePart || '').split(':');\n  return new Date(`${month}/${day}/${year} ${hour}:${minute}:${second}`);\n}\nasync function getMsg(id, token) {\n  const response = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (response.ok) {\n    const msgArr = await response.json();\n    const formattedMessages = msgArr.map(msg => ({\n      id: msg.id,\n      created: convertToDate(msg.created),\n      sender: {\n        username: msg.sender.username\n      },\n      content: msg.content\n    }));\n    return formattedMessages;\n  } else {\n    throw new Error('Failed to fetch messages');\n  }\n}\nfunction Right(_ref) {\n  _s();\n  let {\n    p,\n    image,\n    contactList,\n    setContactList,\n    token,\n    chatID\n  } = _ref;\n  const [formattedMessages, setFormattedMessages] = useState([]);\n  console.log(getMsg(chatID, token));\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const messages = await getMsg(chatID, token);\n        setFormattedMessages(messages);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchMessages();\n  }, [chatID, token]);\n  const [inputValue, setInputValue] = useState('');\n  const contact = contactList.find(obj => obj.display === p);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleButtonClick();\n    }\n  };\n  const handleButtonClick = () => {\n    if (inputValue !== '') {\n      const date = new Date();\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      const formattedTime = `${hours}:${minutes < 10 ? '0' : ''}${minutes}`;\n      const newMessage = {\n        id: formattedMessages.length + 1,\n        created: date,\n        sender: {\n          username: 'me'\n        },\n        content: inputValue\n      };\n\n      // Update the contact's messages array by creating a new array with the new message\n      const updatedContact = {\n        ...contact,\n        date: `${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`,\n        messages: [...formattedMessages, newMessage]\n      };\n\n      // Find the index of the contact in the contactList array\n      const contactIndex = contactList.findIndex(obj => obj.display === p);\n\n      // Create a new contactList array with the updated contact\n      const updatedContactList = [...contactList];\n      updatedContactList[contactIndex] = updatedContact;\n\n      // Update the contactList state with the updated array\n      setContactList(updatedContactList);\n      setInputValue('');\n\n      // Get the active chat element\n      const activeContact = document.querySelector('.active');\n      const dateElement = activeContact.querySelector('.date');\n      const formattedDate = `${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`;\n      dateElement.innerHTML = formattedDate;\n      updatedContactList.sort((a, b) => {\n        const timeA = convertToDate(a.date);\n        const timeB = convertToDate(b.date);\n        return timeB - timeA;\n      });\n      setContactList(updatedContactList);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ActiveContact, {\n      name: p,\n      img: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), contact && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ActiveChat, {\n        Messages: formattedMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-aaa fff\",\n        id: \"footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message\",\n          id: \"message-input\",\n          value: inputValue,\n          onChange: handleInputChange,\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-info\",\n          onClick: handleButtonClick,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bi bi-send-fill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n_s(Right, \"jANUP014JaYLXDxQ8lHhGSp4Edc=\");\n_c = Right;\nexport default Right;\nvar _c;\n$RefreshReg$(_c, \"Right\");","map":{"version":3,"names":["ActiveContact","ActiveChat","React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","convertToDate","timeString","undefined","Date","datePart","timePart","split","day","month","year","hour","minute","second","getMsg","id","token","response","fetch","method","headers","ok","msgArr","json","formattedMessages","map","msg","created","sender","username","content","Error","Right","_ref","_s","p","image","contactList","setContactList","chatID","setFormattedMessages","console","log","fetchMessages","messages","error","inputValue","setInputValue","contact","find","obj","display","handleInputChange","event","target","value","handleKeyPress","key","handleButtonClick","date","hours","getHours","minutes","getMinutes","formattedTime","newMessage","length","updatedContact","toLocaleDateString","toLocaleTimeString","contactIndex","findIndex","updatedContactList","activeContact","document","querySelector","dateElement","formattedDate","innerHTML","sort","a","b","timeA","timeB","children","name","img","fileName","_jsxFileName","lineNumber","columnNumber","Messages","className","type","placeholder","onChange","onKeyPress","onClick","_c","$RefreshReg$"],"sources":["C:/yoniP/ap2-ex2/Client/src/Chats/Right/Right.js"],"sourcesContent":["import './Right.css'\r\nimport ActiveContact from './ActiveContact/ActiveContact';\r\nimport ActiveChat from './ActiveChat/ActiveChat';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction convertToDate(timeString) {\r\n  if (timeString === '' || timeString === undefined) {\r\n    return new Date(0);\r\n  }\r\n  const [datePart, timePart] = (timeString || '').split(', ');\r\n  const [day, month, year] = (datePart || '').split('.');\r\n  const [hour, minute, second] = (timePart || '').split(':');\r\n\r\n  return new Date(`${month}/${day}/${year} ${hour}:${minute}:${second}`);\r\n}\r\n\r\n\r\nasync function getMsg(id, token) {\r\n  const response = await fetch(`http://localhost:5000/api/Chats/${id}/Messages`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (response.ok) {\r\n    const msgArr = await response.json();\r\n\r\n    const formattedMessages = msgArr.map((msg) => ({\r\n      id: msg.id,\r\n      created: convertToDate(msg.created),\r\n      sender: {\r\n        username: msg.sender.username,\r\n      },\r\n      content: msg.content,\r\n    }));\r\n\r\n    return formattedMessages;\r\n  } else {\r\n    throw new Error('Failed to fetch messages');\r\n  }\r\n}\r\n\r\nfunction Right({ p, image, contactList, setContactList, token, chatID }) {\r\n  const [formattedMessages, setFormattedMessages] = useState([]);\r\nconsole.log(getMsg(chatID, token))\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const messages = await getMsg(chatID, token);\r\n        setFormattedMessages(messages);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [chatID, token]);\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n  const contact = contactList.find(obj => obj.display === p);\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleButtonClick();\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    if (inputValue !== '') {\r\n      const date = new Date();\r\n      const hours = date.getHours();\r\n      const minutes = date.getMinutes();\r\n      const formattedTime = `${hours}:${minutes < 10 ? '0' : ''}${minutes}`;\r\n      const newMessage = {\r\n        id: formattedMessages.length + 1,\r\n        created: date,\r\n        sender: {\r\n          username: 'me',\r\n        },\r\n        content: inputValue,\r\n      };\r\n\r\n      // Update the contact's messages array by creating a new array with the new message\r\n      const updatedContact = {\r\n        ...contact,\r\n        date: `${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`,\r\n        messages: [...formattedMessages, newMessage],\r\n      };\r\n\r\n      // Find the index of the contact in the contactList array\r\n      const contactIndex = contactList.findIndex(obj => obj.display === p);\r\n\r\n      // Create a new contactList array with the updated contact\r\n      const updatedContactList = [...contactList];\r\n      updatedContactList[contactIndex] = updatedContact;\r\n\r\n      // Update the contactList state with the updated array\r\n      setContactList(updatedContactList);\r\n\r\n      setInputValue('');\r\n\r\n      // Get the active chat element\r\n      const activeContact = document.querySelector('.active');\r\n      const dateElement = activeContact.querySelector('.date');\r\n      const formattedDate = `${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`;\r\n      dateElement.innerHTML = formattedDate;\r\n\r\n      updatedContactList.sort((a, b) => {\r\n        const timeA = convertToDate(a.date);\r\n        const timeB = convertToDate(b.date);\r\n\r\n        return timeB - timeA;\r\n      });\r\n\r\n      setContactList(updatedContactList);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ActiveContact name={p} img={image} />\r\n      {contact && (\r\n        <>\r\n          <ActiveChat Messages={formattedMessages} />\r\n          <div className=\"row-aaa fff\" id=\"footer\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type a message\"\r\n              id=\"message-input\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n            <button type=\"button\" className=\"btn btn-info\" onClick={handleButtonClick}>\r\n              <i className=\"bi bi-send-fill\" />\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Right;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}