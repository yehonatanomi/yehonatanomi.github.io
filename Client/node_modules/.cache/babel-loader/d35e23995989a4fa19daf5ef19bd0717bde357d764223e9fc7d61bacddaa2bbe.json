{"ast":null,"code":"var _jsxFileName = \"C:\\\\yoniP\\\\ap2-ex2\\\\Client\\\\src\\\\Chats\\\\Left\\\\ContactListResult\\\\ContactListResult.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Contact from '../Contact/Contact';\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContactListResult(_ref) {\n  _s();\n  let {\n    contacts,\n    setContactList,\n    token,\n    chatID,\n    setChatID\n  } = _ref;\n  const deleteContact = async id => {\n    const response = await fetch('http://localhost:5000/api/Chats/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    if (response.ok) {\n      // Update the contacts list after deleting the contact\n      const updatedContacts = contacts.filter(contact => contact.id !== id);\n      setContactList(updatedContacts);\n    }\n  };\n\n  // Attach event listeners after the component renders\n  useEffect(() => {\n    const attachEventListeners = () => {\n      const chats = document.getElementsByClassName('chats');\n\n      // Add a click event listener to each button\n      for (let i = 0; i < chats.length; i++) {\n        chats[i].addEventListener('click', function (event) {\n          // Exclude the click event if the delete button is clicked\n          const deleteButton = this.querySelector('.bi-x-square');\n          if (deleteButton) {\n            deleteButton.addEventListener('click', function (event) {\n              if (this.parentElement.classList.contains('active')) {\n                setChatID(null);\n              }\n            });\n          }\n          if (event.target.classList.contains('bi-x-square')) {\n            return;\n          }\n\n          // Remove the \"active\" class from all buttons\n          for (let j = 0; j < chats.length; j++) {\n            if (chats[j].classList.contains('active')) {\n              chats[j].classList.remove('active');\n            }\n          }\n\n          // Add the \"active\" class to the button that was pressed\n          this.classList.add('active');\n          var idText = this.querySelector('.chatID');\n          var innerText = idText.innerHTML;\n          setChatID(innerText);\n        });\n      }\n    };\n    attachEventListeners();\n  }, [contacts, setChatID]);\n  let updatedContactList = contacts;\n  updatedContactList.sort((a, b) => {\n    var timeA, timeB;\n    if (!a.lastMessage) {\n      timeA = new Date(0);\n    } else {\n      timeA = new Date(a.lastMessage.created);\n    }\n    if (!b.lastMessage) {\n      timeB = new Date(0);\n    } else {\n      timeB = new Date(b.lastMessage.created);\n    }\n    if (!a.lastMessage && b.lastMessage) {\n      return 1; // a has no message, b has a message (move a down)\n    } else if (a.lastMessage && !b.lastMessage) {\n      return -1; // a has a message, b has no message (move b down)\n    } else {\n      return timeB - timeA; // both a and b have messages, sort by created time\n    }\n  });\n\n  const userMap = new Map();\n  const uniqueContacts = [];\n\n  // Iterate over contacts to extract unique users\n  for (let i = 0; i < updatedContactList.length; i++) {\n    const contact = updatedContactList[i];\n    const userId = contact.id;\n    const user = contact.user;\n    // Check if the user is already added to the map\n    if (!userMap.has(userId)) {\n      userMap.set(userId, user);\n      uniqueContacts.push(contact);\n    }\n  }\n\n  /// send info about conatact\n  const contactList = uniqueContacts.map(contact => ({\n    contact,\n    created: contact.lastMessage ? contact.lastMessage.created : null\n  })).sort((a, b) => {\n    // Handle null values by placing them at the end of the sorted list\n    if (a.created === null && b.created === null) {\n      return 0;\n    } else if (a.created === null) {\n      return 1;\n    } else if (b.created === null) {\n      return -1;\n    }\n\n    // Sort by the created property in ascending order\n    return a.created - b.created;\n  }).map(_ref2 => {\n    let {\n      contact\n    } = _ref2;\n    return /*#__PURE__*/_createElement(Contact, {\n      ...contact.user,\n      key: contact.id,\n      token: token,\n      id: contact.id,\n      deleteContact: deleteContact,\n      chatID: chatID,\n      setChatID: setChatID,\n      lastMessage: contact.lastMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 3\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"users_list\",\n    children: contactList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 10\n  }, this);\n}\n_s(ContactListResult, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ContactListResult;\nexport default ContactListResult;\nvar _c;\n$RefreshReg$(_c, \"ContactListResult\");","map":{"version":3,"names":["React","useEffect","Contact","createElement","_createElement","jsxDEV","_jsxDEV","ContactListResult","_ref","_s","contacts","setContactList","token","chatID","setChatID","deleteContact","id","response","fetch","method","headers","ok","updatedContacts","filter","contact","attachEventListeners","chats","document","getElementsByClassName","i","length","addEventListener","event","deleteButton","querySelector","parentElement","classList","contains","target","j","remove","add","idText","innerText","innerHTML","updatedContactList","sort","a","b","timeA","timeB","lastMessage","Date","created","userMap","Map","uniqueContacts","userId","user","has","set","push","contactList","map","_ref2","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/yoniP/ap2-ex2/Client/src/Chats/Left/ContactListResult/ContactListResult.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Contact from '../Contact/Contact';\r\n\r\nfunction ContactListResult({ contacts, setContactList, token, chatID, setChatID }) {\r\n\r\n  const deleteContact = async (id) => {\r\n    const response = await fetch('http://localhost:5000/api/Chats/' + id, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        'Authorization': 'Bearer ' + token,\r\n      },\r\n    });\r\n    if (response.ok) {\r\n     \r\n      // Update the contacts list after deleting the contact\r\n      const updatedContacts = contacts.filter(contact => contact.id !== id);\r\n      setContactList(updatedContacts);\r\n    }\r\n  };\r\n\r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n  \r\n  // Attach event listeners after the component renders\r\n  useEffect(() => {\r\n    const attachEventListeners = () => {\r\n      const chats = document.getElementsByClassName('chats');\r\n    \r\n      // Add a click event listener to each button\r\n      for (let i = 0; i < chats.length; i++) {\r\n        chats[i].addEventListener('click', function (event) {\r\n          // Exclude the click event if the delete button is clicked\r\n          const deleteButton = this.querySelector('.bi-x-square');\r\n          if (deleteButton) {\r\n            deleteButton.addEventListener('click', function (event) {\r\n              if (this.parentElement.classList.contains('active')) {\r\n                setChatID(null);\r\n              }\r\n            });\r\n          }\r\n    \r\n          if (event.target.classList.contains('bi-x-square')) {\r\n            return;\r\n          }\r\n    \r\n          // Remove the \"active\" class from all buttons\r\n          for (let j = 0; j < chats.length; j++) {\r\n            if (chats[j].classList.contains('active')) {\r\n              chats[j].classList.remove('active');\r\n            }\r\n          }\r\n    \r\n          // Add the \"active\" class to the button that was pressed\r\n          this.classList.add('active');\r\n          var idText = this.querySelector('.chatID');\r\n          var innerText = idText.innerHTML;\r\n          setChatID(innerText);\r\n        });\r\n      }\r\n    };\r\n    attachEventListeners();\r\n  }, [contacts, setChatID]);\r\n\r\n  \r\n  let updatedContactList = contacts;\r\n      \r\n  updatedContactList.sort((a, b) => {\r\n    var timeA, timeB;\r\n  \r\n    if (!a.lastMessage) {\r\n      timeA = new Date(0);\r\n    } else {\r\n      timeA = new Date(a.lastMessage.created);\r\n    }\r\n  \r\n    if (!b.lastMessage) {\r\n      timeB = new Date(0);\r\n    } else {\r\n      timeB = new Date(b.lastMessage.created);\r\n    }\r\n  \r\n    if (!a.lastMessage && b.lastMessage) {\r\n      return 1; // a has no message, b has a message (move a down)\r\n    } else if (a.lastMessage && !b.lastMessage) {\r\n      return -1; // a has a message, b has no message (move b down)\r\n    } else {\r\n      return timeB - timeA; // both a and b have messages, sort by created time\r\n    }\r\n  });\r\n \r\n  const userMap = new Map();\r\n  const uniqueContacts = [];\r\n\r\n  // Iterate over contacts to extract unique users\r\n  for (let i = 0; i < updatedContactList.length; i++) {\r\n    const contact = updatedContactList[i];\r\n    const userId = contact.id;\r\n    const user = contact.user;\r\n    // Check if the user is already added to the map\r\n    if (!userMap.has(userId)) {\r\n      userMap.set(userId, user);\r\n      uniqueContacts.push(contact);\r\n    }\r\n  }\r\n  \r\n/// send info about conatact\r\nconst contactList = uniqueContacts\r\n.map((contact) => ({\r\n  contact,\r\n  created: contact.lastMessage ? contact.lastMessage.created : null,\r\n}))\r\n.sort((a, b) => {\r\n  // Handle null values by placing them at the end of the sorted list\r\n  if (a.created === null && b.created === null) {\r\n    return 0;\r\n  } else if (a.created === null) {\r\n    return 1;\r\n  } else if (b.created === null) {\r\n    return -1;\r\n  }\r\n\r\n  // Sort by the created property in ascending order\r\n  return a.created - b.created;\r\n})\r\n.map(({ contact }) => (\r\n  <Contact\r\n    {...contact.user}\r\n    key={contact.id}\r\n    token={token}\r\n    id={contact.id}\r\n    deleteContact={deleteContact}\r\n    chatID={chatID}\r\n    setChatID={setChatID}\r\n    lastMessage={contact.lastMessage}\r\n  />\r\n));\r\n\r\n  return <div className=\"users_list\">{contactList}</div>;\r\n}\r\n\r\nexport default ContactListResult;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}