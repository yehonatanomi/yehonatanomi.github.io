{"ast":null,"code":"var _jsxFileName = \"C:\\\\yoniP\\\\ap2-ex2\\\\Client\\\\src\\\\Chats\\\\Left\\\\ContactListResult\\\\ContactListResult.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Contact from '../Contact/Contact';\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContactListResult(_ref) {\n  _s();\n  let {\n    contacts,\n    setContactList,\n    token,\n    chatID,\n    setChatID\n  } = _ref;\n  const deleteContact = async id => {\n    const response = await fetch('http://localhost:5000/api/Chats/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    if (response.ok) {\n      // Update the contacts list after deleting the contact\n      const updatedContacts = contacts.filter(contact => contact.id !== id);\n      setContactList(updatedContacts);\n    }\n  };\n  const attachEventListeners = () => {\n    const chats = document.getElementsByClassName('chats');\n\n    // Add a click event listener to each button\n    for (let i = 0; i < chats.length; i++) {\n      chats[i].addEventListener('click', function () {\n        // Remove the \"active\" class from all buttons\n        for (let j = 0; j < chats.length; j++) {\n          if (chats[j].classList.contains('active')) {\n            chats[j].classList.remove('active');\n          }\n        }\n\n        // Add the \"active\" class to the button that was pressed\n        this.classList.add('active');\n        var idText = this.querySelector('.chatID');\n        var innerText = idText.innerHTML;\n        setChatID(innerText);\n      });\n    }\n  };\n\n  // Attach event listeners after the component renders\n  useEffect(() => {\n    attachEventListeners();\n  }, [contacts]);\n  const userMap = new Map();\n  const uniqueContacts = [];\n\n  // Iterate over contacts to extract unique users\n  for (let i = 0; i < contacts.length; i++) {\n    const contact = contacts[i];\n    const userId = contact.id;\n    const user = contact.user;\n    console.log(contact.user.lastmessage);\n    // Check if the user is already added to the map\n    if (!userMap.has(userId)) {\n      userMap.set(userId, user);\n      uniqueContacts.push(contact);\n    }\n  }\n  const contactList = uniqueContacts.map(contact => /*#__PURE__*/_createElement(Contact, {\n    ...contact.user,\n    key: contact.id,\n    token: token,\n    id: contact.id,\n    deleteContact: deleteContact,\n    chatID: chatID,\n    setChatID: setChatID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"users_list\",\n    children: contactList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n}\n_s(ContactListResult, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ContactListResult;\nexport default ContactListResult;\nvar _c;\n$RefreshReg$(_c, \"ContactListResult\");","map":{"version":3,"names":["React","useEffect","Contact","createElement","_createElement","jsxDEV","_jsxDEV","ContactListResult","_ref","_s","contacts","setContactList","token","chatID","setChatID","deleteContact","id","response","fetch","method","headers","ok","updatedContacts","filter","contact","attachEventListeners","chats","document","getElementsByClassName","i","length","addEventListener","j","classList","contains","remove","add","idText","querySelector","innerText","innerHTML","userMap","Map","uniqueContacts","userId","user","console","log","lastmessage","has","set","push","contactList","map","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/yoniP/ap2-ex2/Client/src/Chats/Left/ContactListResult/ContactListResult.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Contact from '../Contact/Contact';\r\n\r\nfunction ContactListResult({ contacts, setContactList, token, chatID, setChatID }) {\r\n\r\n  const deleteContact = async (id) => {\r\n    const response = await fetch('http://localhost:5000/api/Chats/' + id, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        'Authorization': 'Bearer ' + token,\r\n      },\r\n    });\r\n    if (response.ok) {\r\n     \r\n      // Update the contacts list after deleting the contact\r\n      const updatedContacts = contacts.filter(contact => contact.id !== id);\r\n      setContactList(updatedContacts);\r\n    }\r\n  };\r\n\r\n  const attachEventListeners = () => {\r\n    const chats = document.getElementsByClassName('chats');\r\n\r\n    // Add a click event listener to each button\r\n    for (let i = 0; i < chats.length; i++) {\r\n      chats[i].addEventListener('click', function () {\r\n        // Remove the \"active\" class from all buttons\r\n        for (let j = 0; j < chats.length; j++) {\r\n          if (chats[j].classList.contains('active')) {\r\n            chats[j].classList.remove('active');\r\n          }\r\n        }\r\n\r\n        // Add the \"active\" class to the button that was pressed\r\n        this.classList.add('active');\r\n        var idText = this.querySelector('.chatID');\r\n        var innerText = idText.innerHTML;\r\n  \r\n        setChatID(innerText)\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  \r\n  // Attach event listeners after the component renders\r\n  useEffect(() => {\r\n    attachEventListeners();\r\n  }, [contacts]);\r\n\r\n  \r\n\r\n \r\n  const userMap = new Map();\r\n  const uniqueContacts = [];\r\n\r\n  // Iterate over contacts to extract unique users\r\n  for (let i = 0; i < contacts.length; i++) {\r\n    const contact = contacts[i];\r\n    const userId = contact.id;\r\n    const user = contact.user;\r\n      console.log(contact.user.lastmessage);\r\n    // Check if the user is already added to the map\r\n    if (!userMap.has(userId)) {\r\n      userMap.set(userId, user);\r\n      uniqueContacts.push(contact);\r\n    }\r\n  }\r\n\r\n  const contactList = uniqueContacts.map((contact) => (\r\n    <Contact {...contact.user} key={contact.id} token={token} id={contact.id} deleteContact={deleteContact} chatID={chatID} setChatID={setChatID}  />\r\n  ));\r\n\r\n  return <div className=\"users_list\">{contactList}</div>;\r\n}\r\n\r\nexport default ContactListResult;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,OAAO,MAAM,oBAAoB;AAAC,SAAAC,aAAA,IAAAC,cAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,iBAAiBA,CAAAC,IAAA,EAAyD;EAAAC,EAAA;EAAA,IAAxD;IAAEC,QAAQ;IAAEC,cAAc;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAAN,IAAA;EAE/E,MAAMO,aAAa,GAAG,MAAOC,EAAE,IAAK;IAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,GAAGF,EAAE,EAAE;MACpEG,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGR;MAC/B;IACF,CAAC,CAAC;IACF,IAAIK,QAAQ,CAACI,EAAE,EAAE;MAEf;MACA,MAAMC,eAAe,GAAGZ,QAAQ,CAACa,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACR,EAAE,KAAKA,EAAE,CAAC;MACrEL,cAAc,CAACW,eAAe,CAAC;IACjC;EACF,CAAC;EAED,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMC,KAAK,GAAGC,QAAQ,CAACC,sBAAsB,CAAC,OAAO,CAAC;;IAEtD;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACrCH,KAAK,CAACG,CAAC,CAAC,CAACE,gBAAgB,CAAC,OAAO,EAAE,YAAY;QAC7C;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,CAACI,MAAM,EAAEE,CAAC,EAAE,EAAE;UACrC,IAAIN,KAAK,CAACM,CAAC,CAAC,CAACC,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACzCR,KAAK,CAACM,CAAC,CAAC,CAACC,SAAS,CAACE,MAAM,CAAC,QAAQ,CAAC;UACrC;QACF;;QAEA;QACA,IAAI,CAACF,SAAS,CAACG,GAAG,CAAC,QAAQ,CAAC;QAC5B,IAAIC,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC,SAAS,CAAC;QAC1C,IAAIC,SAAS,GAAGF,MAAM,CAACG,SAAS;QAEhC1B,SAAS,CAACyB,SAAS,CAAC;MACtB,CAAC,CAAC;IACJ;EACF,CAAC;;EAMD;EACAtC,SAAS,CAAC,MAAM;IACdwB,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;EAKd,MAAM+B,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,cAAc,GAAG,EAAE;;EAEzB;EACA,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,QAAQ,CAACoB,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC,MAAML,OAAO,GAAGd,QAAQ,CAACmB,CAAC,CAAC;IAC3B,MAAMe,MAAM,GAAGpB,OAAO,CAACR,EAAE;IACzB,MAAM6B,IAAI,GAAGrB,OAAO,CAACqB,IAAI;IACvBC,OAAO,CAACC,GAAG,CAACvB,OAAO,CAACqB,IAAI,CAACG,WAAW,CAAC;IACvC;IACA,IAAI,CAACP,OAAO,CAACQ,GAAG,CAACL,MAAM,CAAC,EAAE;MACxBH,OAAO,CAACS,GAAG,CAACN,MAAM,EAAEC,IAAI,CAAC;MACzBF,cAAc,CAACQ,IAAI,CAAC3B,OAAO,CAAC;IAC9B;EACF;EAEA,MAAM4B,WAAW,GAAGT,cAAc,CAACU,GAAG,CAAE7B,OAAO,iBAC7CpB,cAAA,CAACF,OAAO;IAAA,GAAKsB,OAAO,CAACqB,IAAI;IAAES,GAAG,EAAE9B,OAAO,CAACR,EAAG;IAACJ,KAAK,EAAEA,KAAM;IAACI,EAAE,EAAEQ,OAAO,CAACR,EAAG;IAACD,aAAa,EAAEA,aAAc;IAACF,MAAM,EAAEA,MAAO;IAACC,SAAS,EAAEA,SAAU;IAAAyC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAG,CACjJ,CAAC;EAEF,oBAAOtD,OAAA;IAAKuD,SAAS,EAAC,YAAY;IAAAC,QAAA,EAAEV;EAAW;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACxD;AAACnD,EAAA,CA1EQF,iBAAiB;AAAAwD,EAAA,GAAjBxD,iBAAiB;AA4E1B,eAAeA,iBAAiB;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}